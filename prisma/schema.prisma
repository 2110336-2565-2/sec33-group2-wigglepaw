// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [userId], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// ***************** IMPORTANT *******************
// I changed "id" to "userId" for clearer meaning.
// This can fuck up NextAuth, please fix the variable names after merging this.
// ***************** IMPORTANT *******************
model User {
    userId        String     @id @default(cuid())
    petOwner      PetOwner?
    petSitter     PetSitter?
    username      String     @unique
    password      String
    email         String     @unique
    emailVerified DateTime?
    phoneNumber   String?
    address       String?
    imageUri      String?
    bankAccount   String? // Assume 1 per user
    bankName      String? // Assume 1 per user
    accounts      Account[] // Needed for Auth
    sessions      Session[] // Needed for Auth
}

model PetOwner {
    userId    String   @id @default(cuid())
    user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
    booking   Booking[]
    petTypes  String[]
    firstName String
    lastName  String
    review    Review[]
    pet       Pet[]
}

model PetSitter {
    userId             String              @id @default(cuid())
    user               User                @relation(fields: [userId], references: [userId], onDelete: Cascade)
    freelancePetSitter FreelancePetSitter?
    petHotel           PetHotel?
    booking            Booking[]
    petTypes           String[]
    verifyStatus       Boolean
    certificationUri   String?
    startPrice         Float?
    endPrice           Float?
    review             Review[]
    post               Post[]
}

model FreelancePetSitter {
    userId    String    @id @default(cuid())
    petSitter PetSitter @relation(fields: [userId], references: [userId], onDelete: Cascade)
    firstName String
    lastName  String
}

model PetHotel {
    userId             String    @id @default(cuid())
    petSitter          PetSitter @relation(fields: [userId], references: [userId], onDelete: Cascade)
    businessLicenseUri String?
    hotelName          String
}

model Booking {
    bookingId       String    @id @default(cuid())
    petOwner        PetOwner    @relation(fields: [petOwnerId], references: [userId])
    petSitter       PetSitter   @relation(fields: [petSitterId], references: [userId])
    petOwnerId      String
    petSitterId     String
    startDate       DateTime
    endDate         DateTime
    numberOfPets    Int
    pet             Pet[]   @relation("MyRelationTable")
    status          BookingStatus
    note            String?
}

enum BookingStatus {
    requested
    accepted
    canceledByPetOwner
    canceledByPetSitter
}

model Pet {
    petId      String   @id @default(cuid())
    petOwnerId String
    petOwner   PetOwner @relation(fields: [petOwnerId], references: [userId], onDelete: Cascade)
    petType    String
    name       String?
    sex        String?
    breed      String?
    pet        Booking[]    @relation("MyRelationTable")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Review {
    reviewId    String    @id @default(cuid())
    petOwnerId  String
    petOwner    PetOwner  @relation(fields: [petOwnerId], references: [userId], onDelete: Cascade)
    petSitterId String
    petSitter   PetSitter @relation(fields: [petSitterId], references: [userId], onDelete: Cascade)
    text        String?
    rating      Int
}

model Post {
    postId      String    @id @default(cuid())
    petSitterId String
    petSitter   PetSitter @relation(fields: [petSitterId], references: [userId], onDelete: Cascade)
    text        String
    pictureUri  String?
    videoUri    String?
}
